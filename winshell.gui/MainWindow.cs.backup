using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;
using System.Threading.Tasks;
using System.Linq;
using WinShell.Core;

namespace WinShell.GUI
{
    public partial class MainWindow : Form
    {
        private TerminalControl _terminal;
        private MenuStrip _menuStrip;
        private ToolStrip _toolStrip;
        private StatusStrip _statusStrip;
        private ToolStripStatusLabel _statusLabel;
        private ToolStripStatusLabel _directoryLabel;
        private Panel _buttonPanel;
        private ThemeManager _themeManager;
        private Panel _sidePanel;

        public MainWindow()
        {
            InitializeComponent();
            SetupWindow();
            _themeManager = new ThemeManager();
            ApplyTheme(_themeManager.CurrentTheme);
        }

        private void InitializeComponent()
        {
            this.SuspendLayout();
            
            // Form settings
            this.Text = "🖥️ WinShell - Modern Terminal";
            this.Size = new Size(1400, 800);
            this.StartPosition = FormStartPosition.CenterScreen;
            this.Icon = SystemIcons.Application;
            this.MinimumSize = new Size(1000, 600);
            this.BackColor = Color.FromArgb(30, 30, 30);
            
            // Create menu
            CreateMenuStrip();
            
            // Create modern button panel (side panel)
            CreateModernButtonPanel();
            
            // Create toolbar
            CreateToolStrip();
            
            // Create terminal
            _terminal = new TerminalControl
            {
                Dock = DockStyle.Fill,
                BackColor = Color.FromArgb(12, 12, 12),
                ForeColor = Color.FromArgb(204, 204, 204),
                Font = new Font("Cascadia Code", 10F, FontStyle.Regular),
            };
            
            // Create status bar
            CreateStatusStrip();
            
            // Add controls in correct z-order
            this.Controls.Add(_terminal);
            this.Controls.Add(_sidePanel);
            this.Controls.Add(_statusStrip);
            this.Controls.Add(_toolStrip);
            this.Controls.Add(_menuStrip);
            
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        private void CreateMenuStrip()
        {
            _menuStrip = new MenuStrip
            {
                BackColor = Color.FromArgb(45, 45, 48),
                ForeColor = Color.White
            };

            // File menu
            var fileMenu = new ToolStripMenuItem("File");
            fileMenu.DropDownItems.Add("New Terminal", null, (s, e) => NewTerminal());
            fileMenu.DropDownItems.Add("Open Script", null, (s, e) => OpenScript());
            fileMenu.DropDownItems.Add("Save Output", null, (s, e) => SaveOutput());
            fileMenu.DropDownItems.Add(new ToolStripSeparator());
            fileMenu.DropDownItems.Add("Exit", null, (s, e) => Application.Exit());

            // Edit menu
            var editMenu = new ToolStripMenuItem("Edit");
            editMenu.DropDownItems.Add("Copy", null, (s, e) => _terminal.Copy());
            editMenu.DropDownItems.Add("Paste", null, (s, e) => _terminal.Paste());
            editMenu.DropDownItems.Add("Clear", null, (s, e) => _terminal.Clear());
            editMenu.DropDownItems.Add(new ToolStripSeparator());
            editMenu.DropDownItems.Add("Find", null, (s, e) => ShowFindDialog());

            // View menu
            var viewMenu = new ToolStripMenuItem("View");
            viewMenu.DropDownItems.Add("Zoom In", null, (s, e) => _terminal.ZoomIn());
            viewMenu.DropDownItems.Add("Zoom Out", null, (s, e) => _terminal.ZoomOut());
            viewMenu.DropDownItems.Add("Reset Zoom", null, (s, e) => _terminal.ResetZoom());
            viewMenu.DropDownItems.Add(new ToolStripSeparator());
            viewMenu.DropDownItems.Add("Toggle Fullscreen", null, (s, e) => ToggleFullscreen());

            // Tools menu
            var toolsMenu = new ToolStripMenuItem("Tools");
            toolsMenu.DropDownItems.Add("Environment Variables", null, (s, e) => ShowEnvironmentVariables());
            toolsMenu.DropDownItems.Add("Process Manager", null, (s, e) => ShowProcessManager());
            toolsMenu.DropDownItems.Add("Settings", null, (s, e) => ShowSettings());

            // Help menu
            var helpMenu = new ToolStripMenuItem("Help");
            helpMenu.DropDownItems.Add("Commands", null, (s, e) => _terminal.ExecuteCommand("help"));
            helpMenu.DropDownItems.Add("About", null, (s, e) => ShowAbout());

            _menuStrip.Items.AddRange(new[] { fileMenu, editMenu, viewMenu, toolsMenu, helpMenu });
        }

        private void CreateToolStrip()
        {
            _toolStrip = new ToolStrip
            {
                BackColor = Color.FromArgb(45, 45, 48),
                ForeColor = Color.White,
                GripStyle = ToolStripGripStyle.Hidden
            };

            var newButton = new ToolStripButton("New", null, (s, e) => NewTerminal());
            var openButton = new ToolStripButton("Open", null, (s, e) => OpenScript());
            var saveButton = new ToolStripButton("Save", null, (s, e) => SaveOutput());
            var separator1 = new ToolStripSeparator();
            var copyButton = new ToolStripButton("Copy", null, (s, e) => _terminal.Copy());
            var pasteButton = new ToolStripButton("Paste", null, (s, e) => _terminal.Paste());
            var clearButton = new ToolStripButton("Clear", null, (s, e) => _terminal.Clear());
            var separator2 = new ToolStripSeparator();
            var stopButton = new ToolStripButton("Stop", null, (s, e) => _terminal.StopCurrentCommand());

            _toolStrip.Items.AddRange(new ToolStripItem[] 
            { 
                newButton, openButton, saveButton, separator1,
                copyButton, pasteButton, clearButton, separator2,
                stopButton
            });
        }

        private void CreateStatusStrip()
        {
            _statusStrip = new StatusStrip
            {
                BackColor = Color.FromArgb(0, 122, 204),
                ForeColor = Color.White
            };

            _statusLabel = new ToolStripStatusLabel("Ready");
            _directoryLabel = new ToolStripStatusLabel();
            
            _statusStrip.Items.AddRange(new[] { _statusLabel, new ToolStripStatusLabel { Spring = true }, _directoryLabel });
            
            _terminal.StatusChanged += (s, e) => 
            {
                if (InvokeRequired)
                    Invoke(new Action(() => _statusLabel.Text = e));
                else
                    _statusLabel.Text = e;
            };
            
            _terminal.DirectoryChanged += (s, e) =>
            {
                if (InvokeRequired)
                    Invoke(new Action(() => _directoryLabel.Text = e));
                else
                    _directoryLabel.Text = e;
            };
        }

        private void SetupWindow()
        {
            // Apply modern flat style
            foreach (Control control in Controls)
            {
                if (control is Button btn)
                {
                    btn.FlatStyle = FlatStyle.Flat;
                    btn.FlatAppearance.BorderSize = 0;
                }
            }
        }

        private void NewTerminal()
        {
            var newWindow = new MainWindow();
            newWindow.Show();
        }

        private void OpenScript()
        {
            using (var dialog = new OpenFileDialog())
            {
                dialog.Filter = "Script files (*.ps1;*.bat;*.cmd)|*.ps1;*.bat;*.cmd|All files (*.*)|*.*";
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    _terminal.ExecuteScript(dialog.FileName);
                }
            }
        }

        private void SaveOutput()
        {
            using (var dialog = new SaveFileDialog())
            {
                dialog.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*";
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    _terminal.SaveOutput(dialog.FileName);
                }
            }
        }

        private void ShowFindDialog()
        {
            // Implement find dialog
            MessageBox.Show("Find functionality coming soon!", "Find", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void ToggleFullscreen()
        {
            if (WindowState == FormWindowState.Maximized)
            {
                WindowState = FormWindowState.Normal;
                FormBorderStyle = FormBorderStyle.Sizable;
            }
            else
            {
                FormBorderStyle = FormBorderStyle.None;
                WindowState = FormWindowState.Maximized;
            }
        }

        private void ShowEnvironmentVariables()
        {
            _terminal.ExecuteCommand("env");
        }

        private void ShowProcessManager()
        {
            _terminal.ExecuteCommand("tasklist");
        }

        private void ShowSettings()
        {
            MessageBox.Show("Settings dialog coming soon!", "Settings", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void ShowAbout()
        {
            MessageBox.Show(
                "WinShell v1.0.0\n\n" +
                "Advanced Windows Terminal\n" +
                "Supports all PowerShell commands\n\n" +
                "© 2024 WinShell Project",
                "About WinShell",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information);
        }
    }
}